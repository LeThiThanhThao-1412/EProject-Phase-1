name: CI
on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:5.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd="echo 'db.runCommand(\"ping\").ok' | mongosh localhost:27017/test --quiet"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
    - name: Checkout code
      uses: actions/checkout@v3.2.0
      
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Wait for MongoDB
      run: |
        echo "Waiting for MongoDB to be ready..."
        sleep 15
        # Install mongosh for health check
        curl -fsSL https://pgp.mongodb.com/server-6.0.asc | sudo gpg -o /usr/share/keyrings/mongodb-server-6.0.gpg --dearmor
        echo "deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-server-6.0.gpg ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/6.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-6.0.list
        sudo apt-get update
        sudo apt-get install -y mongodb-mongosh
        mongosh --eval "db.adminCommand('ping')" --quiet || echo "MongoDB starting..."

    - name: Create .env files for testing
      run: |
        # Tạo .env cho auth với MongoDB local
        cat > auth/.env << EOF
        MONGODB_AUTH_URI=mongodb://localhost:27017/auth_test
        JWT_SECRET=test-jwt-secret-for-ci-cd-pipeline-12345
        PORT=3000
        NODE_ENV=test
        EOF
        
        # Tạo .env cho product với MongoDB local
        cat > product/.env << EOF
        JWT_SECRET=test-jwt-secret-for-ci-cd-pipeline-12345
        MONGODB_PRODUCT_URI=mongodb://localhost:27017/product_test
        LOGIN_TEST_USER=test@example.com
        LOGIN_TEST_PASSWORD=testpassword123
        AUTH_SERVICE_URL=http://localhost:3000
        PORT=3001
        NODE_ENV=test
        EOF
        
        # Tạo .env cho order với MongoDB local
        cat > order/.env << EOF
        MONGODB_ORDER_URI=mongodb://localhost:27017/order_test
        PORT=3002
        NODE_ENV=test
        EOF

    - name: Install dependencies and test packages
      run: |
        echo "Installing dependencies..."
        
        # Auth service
        cd auth
        npm ci
        # Install mocha globally or check if it's in devDependencies
        npm install --save-dev mocha chai chai-http
        cd ..
        
        # Product service  
        cd product
        npm ci
        npm install --save-dev mocha chai chai-http
        cd ..
        
        # Order service
        cd order
        npm ci
        npm install --save-dev mocha chai chai-http || echo "Order service may not need tests"
        cd ..
        
    - name: Run tests for auth service
      run: |
        echo "Running auth tests..."
        cd auth
        # Check if mocha is available
        npx mocha --version
        npx mocha --timeout 20000 src/test/**/*.test.js --exit
        
    - name: Start auth service and run product tests
      run: |
        echo "Starting auth service and running product tests..."
        # Start auth service in background
        cd auth
        npm start &
        
        # Wait for auth service to be ready
        echo "Waiting for auth service to start..."
        sleep 25
        
        # Check if auth service is running with retry
        for i in {1..5}; do
          if curl -f http://localhost:3000/health || curl -f http://localhost:3000/login; then
            echo "Auth service is ready!"
            break
          else
            echo "Attempt $i: Auth service not ready, waiting..."
            sleep 5
          fi
        done
        
        # Run product tests
        echo "Running product tests..."
        cd ../product
        npx mocha --version
        npx mocha --timeout 20000 src/test/**/*.test.js --exit

    - name: Run order service tests (if any)
      run: |
        echo "Checking order service..."
        cd order
        # Check if test files exist
        if [ -d "src/test" ] && [ "$(ls -A src/test/*.test.js 2>/dev/null)" ]; then
          npx mocha --timeout 20000 src/test/**/*.test.js --exit
        else
          echo "No test files found in order service"
        fi

    - name: Cleanup
      if: always()
      run: |
        echo "Cleaning up..."
        # Stop any running Node processes
        pkill -f "node" || true
        # Cleanup test databases
        mongosh --eval "
          use auth_test;
          db.dropDatabase();
          use product_test; 
          db.dropDatabase();
          use order_test;
          db.dropDatabase();
        " --quiet || echo "MongoDB cleanup completed"